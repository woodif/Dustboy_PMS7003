/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * Generator:    sensirion-driver-generator 0.9.1
 * Product:      scd30
 * Version:      None
 */
/*
 * Copyright (c) 2022, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2cScd30.h"
#include <Arduino.h>

SensirionI2cScd30::SensirionI2cScd30() {
}

int16_t SensirionI2cScd30::awaitDataReady() {
    uint16_t dataReady = 0;
    int16_t localError = 0;
    localError = getDataReady(dataReady);
    if (localError != NO_ERROR) {
        return localError;
    }
    while (dataReady == 0) {
        delay(100);
        localError = getDataReady(dataReady);
        if (localError != NO_ERROR) {
            return localError;
        }
    }
    return localError;
}

int16_t SensirionI2cScd30::blockingReadMeasurementData(float& co2Concentration,
                                                       float& temperature,
                                                       float& humidity) {
    int16_t localError = 0;
    localError = awaitDataReady();
    if (localError != NO_ERROR) {
        return localError;
    }
    localError = readMeasurementData(co2Concentration, temperature, humidity);
    return localError;
}

int16_t SensirionI2cScd30::startPeriodicMeasurement(uint16_t ambientPressure) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x10, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(ambientPressure);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    return localError;
}

int16_t SensirionI2cScd30::stopPeriodicMeasurement() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x104, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cScd30::setMeasurementInterval(uint16_t interval) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x4600, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(interval);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cScd30::getMeasurementInterval(uint16_t& interval) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x4600, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(interval);
    return localError;
}

int16_t SensirionI2cScd30::getDataReady(uint16_t& dataReadyFlag) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x202, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(dataReadyFlag);
    return localError;
}

int16_t SensirionI2cScd30::readMeasurementData(float& co2Concentration,
                                               float& temperature,
                                               float& humidity) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[18] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x300, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 18,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getFloat(co2Concentration);
    localError |= rxFrame.getFloat(temperature);
    localError |= rxFrame.getFloat(humidity);
    return localError;
}

int16_t SensirionI2cScd30::activateAutoCalibration(uint16_t doActivate) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5306, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(doActivate);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cScd30::getAutoCalibrationStatus(uint16_t& isActive) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5306, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(isActive);
    return localError;
}

int16_t SensirionI2cScd30::forceRecalibration(uint16_t co2RefConcentration) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5204, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(co2RefConcentration);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t
SensirionI2cScd30::getForceRecalibrationStatus(uint16_t& co2RefConcentration) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5204, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(co2RefConcentration);
    return localError;
}

int16_t SensirionI2cScd30::setTemperatureOffset(uint16_t temperatureOffset) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5403, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(temperatureOffset);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cScd30::getTemperatureOffset(uint16_t& temperatureOffset) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5403, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(temperatureOffset);
    return localError;
}

int16_t SensirionI2cScd30::getAltitudeCompensation(uint16_t& altitude) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5102, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt16(altitude);
    return localError;
}

int16_t SensirionI2cScd30::setAltitudeCompensation(uint16_t altitude) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[5] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0x5102, local_buffer, sizeof local_buffer);
    localError |= txFrame.addUInt16(altitude);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    return localError;
}

int16_t SensirionI2cScd30::readFirmwareVersion(uint8_t& major, uint8_t& minor) {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[3] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0xd100, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(10);
    SensirionI2CRxFrame rxFrame(local_buffer, sizeof local_buffer);
    localError = SensirionI2CCommunication::receiveFrame(_i2cAddress, 3,
                                                         rxFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    localError |= rxFrame.getUInt8(major);
    localError |= rxFrame.getUInt8(minor);
    return localError;
}

int16_t SensirionI2cScd30::softReset() {
    int16_t localError = NO_ERROR;
    uint8_t local_buffer[2] = {0};
    SensirionI2CTxFrame txFrame = SensirionI2CTxFrame::createWithUInt16Command(
        0xd304, local_buffer, sizeof local_buffer);
    localError =
        SensirionI2CCommunication::sendFrame(_i2cAddress, txFrame, *_i2cBus);
    if (localError != NO_ERROR) {
        return localError;
    }
    delay(2000);
    return localError;
}

void SensirionI2cScd30::begin(TwoWire& i2cBus, uint8_t i2cAddress) {
    _i2cBus = &i2cBus;
    _i2cAddress = i2cAddress;
}
